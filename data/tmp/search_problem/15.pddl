(define (problem blocks-problem)
	(:domain blocksworld-unstack)
	(:objects b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 t0 t1 tower0 tower1)
	(:init 
		(arm-empty )
		(clear b0)
		(done t0)
		(in-tower t0 tower0)
		(done t1)
		(in-tower t1 tower1)
		(done tower0)
		(done tower1)
		(tower tower0)
		(tower tower1)
		(on b9 t1)
		(in-tower b9 tower1)
		(done b9)
		(on b8 b9)
		(in-tower b8 tower1)
		(done b8)
		(on b7 b8)
		(in-tower b7 tower1)
		(done b7)
		(on b6 b7)
		(in-tower b6 tower1)
		(done b6)
		(on b5 b6)
		(in-tower b5 tower1)
		(done b5)
		(on b4 t0)
		(in-tower b4 tower0)
		(done b4)
		(on b3 b4)
		(in-tower b3 tower0)
		(done b3)
		(on b2 b3)
		(in-tower b2 tower0)
		(done b2)
		(on b1 b2)
		(in-tower b1 tower0)
		(done b1)
		(clear b5)
		(on b0 b1)
		(in-tower b0 tower0)
		(done b0)
		(= (red-count tower0) 0)
		(= (blue-count tower0) 0)
		(= (green-count tower0) 0)
		(= (yellow-count tower0) 0)
		(= (purple-count tower0) 0)
		(= (orange-count tower0) 0)
		(= (pink-count tower0) 0)
		(= (red-count tower1) 0)
		(= (blue-count tower1) 0)
		(= (green-count tower1) 0)
		(= (yellow-count tower1) 0)
		(= (purple-count tower1) 0)
		(= (orange-count tower1) 0)
		(= (pink-count tower1) 0)
	)
	(:goal (and (forall (?x) (done ?x)) (forall (?y) (or (not (green ?y)) (exists (?x) (and (purple ?x) (on ?x ?y))))) (and (not (on b4 b5)) (not (on b0 b5)))))
)